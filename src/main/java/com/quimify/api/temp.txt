for(InorganicModel inorganic : inorganicRepository.findAll()) {
            String text = inorganic.getOtherName();

            if(text != null && !inorganic.getSearchTagsAsStrings().contains(Normalized.of(text)))
                inorganic.addSearchTagOf(text);
        }

for(InorganicModel inorganic : inorganicRepository.findAll()) {
            Set<String> nuevas = new HashSet<>();

            for(InorganicSearchTagModel tag : inorganic.getSearchTags())
                if(tag.getNormalizedTag().contains("selenuro"))
                    nuevas.add(tag.getNormalizedTag().replace("selenuro", "seleniuro"));

            for(String nueva : nuevas)
                inorganic.addSearchTagOf(nueva);
        }

for(InorganicModel inorganic : inorganicRepository.findAll()) {
            Set<String> textos = new HashSet<>();
            Set<InorganicSearchTagModel> nuevas = new HashSet<>();

            for(InorganicSearchTagModel tag : inorganic.getSearchTags()) {
                if(!textos.contains(tag.getNormalizedTag())) {
                    textos.add(tag.getNormalizedTag());
                    nuevas.add(tag);
                }
            }

            if(!(inorganic.getSearchTags().containsAll(nuevas) && nuevas.containsAll(inorganic.getSearchTags()) ))
                inorganic.setSearchTags(nuevas);
        }

    protected Optional<InorganicoModel> probarPaginaFQ(String direccion) { // TEST
        Optional<InorganicoModel> resultado;

        try {
            HttpURLConnection conexion = (HttpURLConnection) new URL(direccion).openConnection();
            conexion.setRequestProperty("User-Agent", configuracionService.getUserAgent());

            PaginaFQ pagina = new PaginaFQ(descargarTexto(conexion));
            InorganicoModel inorganico = pagina.escanearInorganico();

            resultado = Optional.of(inorganico);
        } catch (Exception e) {
            resultado = Optional.empty();
        }

        return resultado;
    }


    @GetMapping("/probarfq") // TEST
    protected Optional<InorganicoModel> probarPaginaFQ(@RequestParam("direccion") String direccion) {
        return inorganicoService.probarPaginaFQ(direccion);
    }

    protected boolean igualA(InorganicoModel igual) {
        if(!formula.contentEquals(igual.getFormula()))
            return false;
        if(!nombre.contentEquals(igual.getNombre()))
            return false;

        if(premium != igual.getPremium())
            return false;

        if(alternativo != null) {
            if(igual.getAlternativo() == null)
                return false;
            if(!alternativo.contentEquals(igual.getAlternativo()))
                return false;
        }
        else if(igual.getAlternativo() != null)
            return false;

        if(masa != null) {
            if(igual.getMasa() == null)
                return false;
            if(!masa.contentEquals(igual.getMasa()))
                return false;
        }

        if(densidad != null) {
            if(igual.getDensidad() == null)
                return false;
            if(!densidad.contentEquals(igual.getDensidad()))
                return false;
        }
        else if(igual.getDensidad() != null)
            return false;

        if(fusion != null) {
            if(igual.getFusion() == null)
                return false;
            if(!fusion.contentEquals(igual.getFusion()))
                return false;
        }
        else if(igual.getFusion() != null)
            return false;

        if(ebullicion != null) {
            if(igual.getEbullicion() == null)
                return false;
            if(!ebullicion.contentEquals(igual.getEbullicion()))
                return false;
        }
        else if(igual.getEbullicion() != null)
            return false;

        if(etiquetas != null) {
            if(igual.getEtiquetas() != null && etiquetas.size() == igual.getEtiquetas().size()) {
                for(int i = 0; i < etiquetas.size(); i++)
                    if(!etiquetas.get(i).contentEquals(igual.getEtiquetas().get(i)))
                        return false;
            }
            else return false;
        }

        return true;
    }

    // Flowchart #7
        private InorganicoResultado decidirPremium(Integer id, Boolean usuario_premium) {
            InorganicoModel resultado = inorganicoRepository.findById(id).get();

            return (!resultado.getPremium() || usuario_premium)
                    ? new InorganicoResultado(resultado) : NO_PREMIUM;
        }